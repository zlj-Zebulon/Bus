package com.zlj.BaiDuMap;


import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;
import java.util.List;
import javax.microedition.khronos.opengles.GL10;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.PointF;
import android.util.Log;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;
import com.baidu.mapapi.SDKInitializer;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BaiduMap.OnMapDrawFrameCallback;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.MarkerOptions;

import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.map.offline.MKOfflineMap;
import com.baidu.mapapi.map.offline.MKOfflineMapListener;
import com.baidu.mapapi.model.LatLng;
import com.zlj.AndroidToolsClass.AndroidToolsClass;
import com.zlj.busphone.MainActivity;
import com.zlj.busphone.R;



/**
 * 
 * @author zlj
 *
 */
public class BaiDuMap implements OnMapDrawFrameCallback{

	private static final String BAIDU_DEFAULT = "bd09ll"; 	//返回的定位结果是百度经纬度,默认值gcj02
	private static final int LOCATE_INTERVAL = 5000;		//设置发起定位请求的间隔时间为5000ms
	private static final float MAP_SCALE = 15;				//500米
	public  int Point_Num = 0;					//要画的点的个数
	
	public double mLatitude;	//经度
	public double mLongitude;	//维度
	public int mLocType;		//error code
	
	/*离线地图*/
	private MKOfflineMap mOffline=null; 
	
	//基础地图
	private MapView mmMapView;
	private AndroidToolsClass mAndroidToolsClass;
	private BaiduMap mBaiduMap;
	private LocationClient mLocationClient;
	private MapLocationListener mListener;
	
	/*画线*/
	private static final String LTAG = MainActivity.class.getSimpleName();
//	private int textureId = -1;
//	private Bitmap bitmap; 
	private List<LatLng> latLngPolygon;
	private float[] vertexs;
	private FloatBuffer vertexBuffer;

	/**
	 * @param appcontext
	 * @param mMapView
	 * @description 构造函数
	 */
	public BaiDuMap(Context appcontext, MapView mMapView)
	{   
		mmMapView = mMapView;
		mAndroidToolsClass = new AndroidToolsClass(appcontext);
		//导入离线地图包初始化
		SDKInitializer.initialize(appcontext);
		mOffline = new MKOfflineMap();
		//地图初始化
        mBaiduMap = mMapView.getMap();
        mListener = new MapLocationListener();
		mLocationClient = new LocationClient(appcontext);	//声明LocationClient类	
		mLocationClient.registerLocationListener(mListener);//注册监听函数
		//设置为卫星地图模式
	//	mBaiduMap.setMapType(mBaiduMap.MAP_TYPE_SATELLITE);
		//初始化定位功能
		InitLocation();
		//导入离线地图包
		ImportOffLineMap();
		//画线初始化
		latLngPolygon = new ArrayList<LatLng>();
        mBaiduMap.setOnMapDrawFrameCallback(this);
		//bitmap = BitmapFactory.decodeResource(this.getResources(),R.drawable.ground_overlay);//画覆盖物
        //去掉百度logo
		mMapView.removeViewAt(1);
	}
	
	/**
	 * @return void
	 * @description 开始定位
	 */
	public void StartLocate()
	{
		mLocationClient.start();		
	}
	
	/**
	 * @return void
	 * @description 结束定位
	 */
	public void StopLocate()
	{
		mLocationClient.stop();
	}
	
	/**
	 * @return void
	 * @description 显示当前位置
	 */
    public void ShowBusIcoLocation()
    {     
    	mBaiduMap.clear();
        LatLng point = new LatLng(mLatitude, mLongitude);  
        //构建Marker图标  
        BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.buslocation);  
        //构建MarkerOption，用于在地图上添加Marker  
        OverlayOptions option = new MarkerOptions().position(point).icon(bitmap);  
        //在地图上添加Marker，并显示  
        mBaiduMap.addOverlay(option);
                
		//设定中心点坐标 
		//LatLng cenpt = new LatLng(mLatitude,mLongitude); 
		//定义地图状态
		MapStatus mMapStatus = new MapStatus.Builder().target(point).build();
		//定义MapStatusUpdate对象，以便描述地图状态将要发生的变化
		MapStatusUpdate mMapStatusUpdate = MapStatusUpdateFactory.newMapStatus(mMapStatus);
		//改变地图状态
		mBaiduMap.setMapStatus(mMapStatusUpdate);		
    }
    
    
    /**
     * @return void
     * @description 定位初始化
     */
	private void InitLocation()
	{
		LocationClientOption option = new LocationClientOption();
		
		option.setLocationMode(LocationMode.Hight_Accuracy);//设置定位模式
		option.setCoorType(BAIDU_DEFAULT);		//返回的定位结果是百度经纬度,默认值gcj02
//		option.setScanSpan(LOCATE_INTERVAL);	//设置发起定位请求的间隔时间为5000ms
		option.setIsNeedAddress(true);		//返回的定位结果包含地址信息
		option.setNeedDeviceDirect(true);	//返回的定位结果包含手机机头的方向
		mLocationClient.setLocOption(option);
		
		//初始化地图比例
		MapStatus mMapStatus = new MapStatus.Builder().zoom(MAP_SCALE).build();
		//定义MapStatusUpdate对象，以便描述地图状态将要发生的变化
		MapStatusUpdate mMapStatusUpdate = MapStatusUpdateFactory.newMapStatus(mMapStatus);
		//改变地图状态
		mBaiduMap.setMapStatus(mMapStatusUpdate);
	}
    
    
	/**
	 * 定位监类
	 * @author zlj
	 * @description 实现BDLocationListener接口,
	 * 				BDLocationListener接口有2个方法需要实现： 1.接收异步返回的定位结果，参数是BDLocation类型参数。
	 */
    public class MapLocationListener implements BDLocationListener {
		@Override
		public void onReceiveLocation(BDLocation location) {
			if (location == null)
			{
		            return ;
			}
			else
			{
				mLocType = location.getLocType();
				mLatitude = location.getLatitude();
				mLongitude = location.getLongitude();
			}
			
			ShowBusIcoLocation();
		}
	}
    
    /**
     * 销毁
     */
    public void AllDestroy()
    {
    	mmMapView.onDestroy();
    	mOffline.destroy();
    }
    
    
    /**
     * 导入离线地图包
     */
    public void ImportOffLineMap() 
    {  
    	
    	mOffline.init(new MKOfflineMapListener(){
    		   @Override
    		   public void onGetOfflineMapState(int arg0, int arg1) {
    		    // TODO Auto-generated method stub
    		    
    		   }
    		   
    		  });
    	
        int num = mOffline.importOfflineData();  
        String msg = "";  
        if (num == 0) {  
            msg = "没有导入离线包，这可能是离线包放置位置不正确，或离线包已经导入过！";  
        } else {  
            msg = String.format("成功导入 %d 个离线包，可以在下载管理查看!", num);  
        }  
        mAndroidToolsClass.ToastShow(msg);  
    }
    
    
    
    /**
     * 
     * @param latlngbuffer 经纬度坐标，数组长度为坐标个数*2
     * @description 根据经纬度画线
     */
    public void DrawLine(int num,double latlngbuffer[])
    {
    	int i;
    	Point_Num = num;
    	latLngPolygon.clear();
    	for(i=0; i<Point_Num; i++)
    	{
    		LatLng latlng = new LatLng(latlngbuffer[i*2], latlngbuffer[i*2+1]);
    		latLngPolygon.add(latlng);
    	}
    }
    
    
    /**
     * @description 画图回调函数
     */
    @Override
	public void onMapDrawFrame(GL10 gl, MapStatus drawingMapStatus) {
		if (mBaiduMap.getProjection() != null) {
			if(!latLngPolygon.isEmpty())
			{
				//计算折线的 opengl 坐标
				calPolylinePoint(drawingMapStatus);
				//绘制折线
				drawPolyline(gl, Color.argb(255, 255, 0, 0), vertexBuffer, 5, Point_Num, drawingMapStatus);
			}
			
			//drawTexture(gl, bitmap, drawingMapStatus);//画覆盖物
		}
	}
	
    /**
     * 
     * @param mspStatus
     * @description 计算折线 OpenGL 坐标
     */
	public void calPolylinePoint(MapStatus mspStatus) {
		PointF[] polyPoints = new PointF[latLngPolygon.size()];
		vertexs = new float[3 * latLngPolygon.size()];
		int i = 0;
		for (LatLng xy : latLngPolygon) {
			// 将地理坐标转换成 openGL 坐标
			polyPoints[i] = mBaiduMap.getProjection().toOpenGLLocation(xy, mspStatus);
			vertexs[i * 3] = polyPoints[i].x;
			vertexs[i * 3 + 1] = polyPoints[i].y;
			vertexs[i * 3 + 2] = 0.0f;
			i++;
		}
		for (int j = 0; j < vertexs.length; j++) {
			Log.d(LTAG, "vertexs[" + j + "]: " + vertexs[j]);
		}
		vertexBuffer = makeFloatBuffer(vertexs);
	}
	
	/**
	 * 
	 * @param fs
	 * @return FloatBuffer
	 * @description 创建OpenGL绘制时的顶点Buffer
	 */
	private FloatBuffer makeFloatBuffer(float[] fs) {
		ByteBuffer bb = ByteBuffer.allocateDirect(fs.length * 4);
		bb.order(ByteOrder.nativeOrder());
		FloatBuffer fb = bb.asFloatBuffer();
		fb.put(fs);
		fb.position(0);
		return fb;
	}

	/**
	 * 
	 * @param gl
	 * @param color
	 * @param lineVertexBuffer
	 * @param lineWidth
	 * @param pointSize
	 * @param drawingMapStatus
	 * @description 画线函数
	 */
	private void drawPolyline(GL10 gl, int color, FloatBuffer lineVertexBuffer,
			float lineWidth, int pointSize, MapStatus drawingMapStatus) {

		gl.glEnable(GL10.GL_BLEND);
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);

		gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);

		float colorA = Color.alpha(color) 	/ 255f;
		float colorR = Color.red(color) 	/ 255f;
		float colorG = Color.green(color) 	/ 255f;
		float colorB = Color.blue(color) 	/ 255f;

		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, lineVertexBuffer);
		gl.glColor4f(colorR, colorG, colorB, colorA);
		gl.glLineWidth(lineWidth);
		gl.glDrawArrays(GL10.GL_LINE_STRIP, 0, pointSize);

		gl.glDisable(GL10.GL_BLEND);
		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
	}
    
    
    /** 
	 * @param gl
	 * @param bitmap
	 * @param drawingMapStatus
	 * @description 使用opengl覆盖物的绘制
	 */
	public void drawTexture(GL10 gl, Bitmap bitmap, MapStatus drawingMapStatus) {
/*		PointF p1= mBaiduMap.getProjection().toOpenGLLocation(latlng2,drawingMapStatus);
		PointF p2= mBaiduMap.getProjection().toOpenGLLocation(latlng3,drawingMapStatus);
		ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4 * 3 * 4);
		byteBuffer.order(ByteOrder.nativeOrder());
		FloatBuffer vertices = byteBuffer.asFloatBuffer();
		vertices.put(new float[] { p1.x, p1.y, 0.0f, p2.x, p1.y, 0.0f, p1.x,
				p2.y, 0.0f, p2.x, p2.y, 0.0f });

		ByteBuffer indicesBuffer = ByteBuffer.allocateDirect(6 * 2);
		indicesBuffer.order(ByteOrder.nativeOrder());
		ShortBuffer indices = indicesBuffer.asShortBuffer();
		indices.put(new short[] { 0, 1, 2, 1, 2, 3 });

		ByteBuffer textureBuffer = ByteBuffer.allocateDirect(4 * 2 * 4);
		textureBuffer.order(ByteOrder.nativeOrder());
		FloatBuffer texture = textureBuffer.asFloatBuffer();
		texture.put(new float[] { 0, 1f, 1f, 1f, 0f, 0f, 1f, 0f });

		indices.position(0);
		vertices.position(0);
		texture.position(0);

		// 生成纹理
		if (textureId == -1) {
			int textureIds[] = new int[1];
			gl.glGenTextures(1, textureIds, 0);
			textureId = textureIds[0];
			Log.d(LTAG, "textureId: " + textureId);
			gl.glBindTexture(GL10.GL_TEXTURE_2D, textureId);
			GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap, 0);
			gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER,
					GL10.GL_NEAREST);
			gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER,
					GL10.GL_NEAREST);
			gl.glBindTexture(GL10.GL_TEXTURE_2D, 0);
		}
	
		gl.glEnable(GL10.GL_TEXTURE_2D);
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
		gl.glEnable(GL10.GL_BLEND);
		gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
		gl.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);

		// 绑定纹理ID
		gl.glBindTexture(GL10.GL_TEXTURE_2D, textureId);
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertices);
		gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, texture);

		gl.glDrawElements(GL10.GL_TRIANGLE_STRIP, 6, GL10.GL_UNSIGNED_SHORT,
				indices);

		gl.glDisable(GL10.GL_TEXTURE_2D);
		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
		gl.glDisable(GL10.GL_BLEND);*/
	}
    
}
