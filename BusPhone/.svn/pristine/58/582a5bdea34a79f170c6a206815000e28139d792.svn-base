package com.zlj.busphone;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;

import android.R.integer;
import android.content.Context;



public class MessageClss {
	
	private Socket socket;
	public String severIP = "192.168.22.1";//IP
	public int severPort = 8888;//端口
	
	OutputStream writemsg = null;
	BufferedReader readmsg;
	
	private RecMsgThread RMThread;//数据接收发送线程
	private int flag = 0;
	
	public static final double[] QING_VILLAGES 	= {30.319971, 120.371554};//清雅苑
	public static final double[] FRED 			= {30.322137, 120.353103};//弗雷德
	public static final double[] HDU_LIVING 	= {30.322044, 120.348378};//杭电生活区
	public static final double[] HIGH_SAND 		= {30.321927, 120.344380};//高沙
	public static final double[] TRADE_CITY 	= {30.311795, 120.346860};//商贸城
	public static final double[] WUMART 		= {30.311218, 120.355403};//物美
	public static final double[] HZ_METRO		= {30.316331, 120.354567};//地铁
	
	public static final double[] HDU_GYM        = {30.321233, 120.347444};//杭电体育馆
	public static final double[] HDU_STADIUM    = {30.319370, 120.347075};//体育场
	public static final double[] HDU_DOOR       = {30.317188, 120.349636};//大门
	public static final double[] HDU_NORTH_DOOR = {30.322067, 120.351594};//北一门
	public static final double[] HDU_LIBRARY 	= {30.320992, 120.349734};//图书馆
	
	
	public MessageClss(Context context)
	{
		//创建线程
		RMThread = new RecMsgThread();
		RMThread.start();
		//socket.connect(new InetSocketAddress(severIP, severPort), Connectiontimeout); 
	}

	
	
	class RecMsgThread extends Thread
	{	//接受消息线程
		int i = 0;
		
		int recmsglen  = 0;
		char[] recmag = new char[50];
		private Integer sendmsg = 4;
		
		@Override
		public void run()
		{
			try {
				//实例化socket
				socket = new Socket(severIP, severPort);
				
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				flag = 1;
			}
			
			if(flag == 0)
			{
				try {
					writemsg = socket.getOutputStream();
					readmsg = new BufferedReader(new InputStreamReader(socket.getInputStream()));//接收
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} 
			}
			

			while(true)
			{
				if(flag == 0)
				{
					try {			
						//writemsg.write(1);
						writemsg.write(sendmsg);
						writemsg.write(sendmsg);
						writemsg.flush();
						
						recmsglen = readmsg.read();
							 	 
						System.out.println(i+"rec from server!!" + recmsglen);
						i++;
						recmsglen = 0;
				    	sleep(5000);
				    	
					} catch (Exception  e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		} 
	}
	
	
	
	void Close()
	{
		if(flag == 0){
			try{	
				writemsg.close();
				readmsg.close();
				socket.close();
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}
	
	/** 
	 * 基于位移的int转化成byte[] 
	 * @param int  number 
	 * @return byte[] 
	 */  
	  
	public static byte[] intToByte(int number) {  
	    byte[] abyte = new byte[4];  
	    // "&" 与（AND），对两个整型操作数中对应位执行布尔代数，两个位都为1时输出1，否则0。  
	    abyte[0] = (byte) (0xff & number);  
	    // ">>"右移位，若为正数则高位补0，若为负数则高位补1  
	    abyte[1] = (byte) ((0xff00 & number) >> 8);  
	    abyte[2] = (byte) ((0xff0000 & number) >> 16);  
	    abyte[3] = (byte) ((0xff000000 & number) >> 24);  
	    return abyte;  
	}  
	  
	/** 
	 *基于位移的 byte[]转化成int 
	 * @param byte[] bytes 
	 * @return int  number 
	 */  
	  
	public static int bytesToInt(byte[] bytes) {  
	    int number = bytes[0] & 0xFF;  
	    // "|="按位或赋值。  
	    number |= ((bytes[1] << 8) & 0xFF00);  
	    number |= ((bytes[2] << 16) & 0xFF0000);  
	    number |= ((bytes[3] << 24) & 0xFF000000);  
	    return number;  
	} 
}
